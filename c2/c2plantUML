@startuml
title RecruitX Next - C2 Container Diagram

actor Recruiter as recruiter
actor Candidate as candidate
actor Interviewer as interviewer

rectangle "RecruitX Next" {
    component "Dashboard UI" as dashboard <<Flutter>> 
    component "Chatbot Interface" as chatbot <<Messenger Bot>> 
    component "Chatbot Interpreter" as chatbot_interpreter <<LangChain + OpenAI>> 
    component "InterviewLogger Wrapper" as interviewLogger_wrapper <<API/Webhook>> 
    component "Candidate Service" as candidate_service <<Microservice>> 
    component "Slot Seeker" as slot_seeker <<Microservice>> 
    component "Interview Scheduler" as interview_scheduler <<Microservice>> 
    component "Notifier Service" as notifier_service <<Microservice>> 
    component "Harvest Sync" as harvest_sync <<Scheduled Job>> 
    component "Config Service" as config_service <<Microservice>> 

    database "MongoDB" as mongodb <<NoSQL Database>> 
    database "Redis" as redis <<In-memory Cache>> 
    queue "Kafka" as kafka <<Message Queue>> 
}

rectangle "External Systems" {
    component "InterviewLogger" as interviewLogger <<Applicant Tracking System>> 
    component "Calendar" as google_calendar <<Calendar Management>> 
    component "Messenger" as messenger <<Messaging Platform>> 
    component "MyMindComputeProfile" as myMindComputeProfile <<Skills & Profile Management>> 
    component "MindComputeScheduler" as mindComputeScheduler <<Preferences & Coordination Rules>> 
    component "LeavePlanner" as leave_planner <<PTO & Holiday Management>> 
}

recruiter --> dashboard : "Views interview status and takes actions"
recruiter --> chatbot : "Interacts via natural language"
candidate --> notifier_service : "Selects time slots"
interviewer --> google_calendar : "Accepts/Declines interviews"

dashboard --> candidate_service : "Initiates interview scheduling"
dashboard --> interview_scheduler : "Manual override actions"
dashboard --> kafka : "Consumes interview events"

chatbot --> chatbot_interpreter : "Forwards user messages"
chatbot_interpreter --> slot_seeker : "Queries availability"
chatbot_interpreter --> interview_scheduler : "Initiates scheduling"

interviewLogger_wrapper --> interviewLogger : "Receives webhooks and updates status"
interviewLogger_wrapper --> candidate_service : "Triggers interview process"

candidate_service --> slot_seeker : "Requests available slots"
candidate_service --> interview_scheduler : "Forwards candidate selections"
candidate_service --> kafka : "Publishes events"

slot_seeker --> mongodb : "Reads cached data"
slot_seeker --> redis : "Reads/writes slot availability"
slot_seeker --> kafka : "Publishes AvailableSlotsGenerated events"

interview_scheduler --> config_service : "Retrieves scoring configurations"
interview_scheduler --> mongodb : "Stores interview data"
interview_scheduler --> notifier_service : "Requests notifications"
interview_scheduler --> kafka : "Publishes scheduling events"

notifier_service --> google_calendar : "Creates and updates calendar events"
notifier_service --> messenger : "Sends notifications"
notifier_service --> kafka : "Publishes notification status"

harvest_sync --> myMindComputeProfile : "Pulls skills and profiles"
harvest_sync --> mindComputeScheduler : "Pulls preferences"
harvest_sync --> leave_planner : "Pulls PTO data"
harvest_sync --> google_calendar : "Pulls availability"
harvest_sync --> mongodb : "Stores synced data"
harvest_sync --> kafka : "Publishes sync events"

config_service --> mongodb : "Stores configuration data"
@enduml