@startuml
!define PERSON actor
!define SYSTEM_BOUNDARY rectangle
!define CONTAINER rectangle
!define EXTERNAL_SYSTEM rectangle
!define DATABASE database

' People
PERSON "Recruiter" as recruiter
PERSON "Candidate" as candidate
PERSON "Interviewer" as interviewer

' External Systems
EXTERNAL_SYSTEM "InterviewLogger\n==\nApplicant Tracking System" as interviewLogger
EXTERNAL_SYSTEM "MyMindComputeProfile\n==\nTechnical Assessment" as myMindComputeProfile
EXTERNAL_SYSTEM "LeavePlanner" as leavePlanner
EXTERNAL_SYSTEM "Calendar" as calendar
EXTERNAL_SYSTEM "MindComputeScheduler" as mindComputeScheduler
EXTERNAL_SYSTEM "Messenger" as Messenger

' System Boundary
SYSTEM_BOUNDARY "RecruitX Next System" as recruitXSystem {
  ' Microservices (Containers)
  CONTAINER "interviewLogger-wrapper\n==\nInterface layer between\nInterviewLogger and internal services" as interviewLoggerWrapper
  
  CONTAINER "candidate-service\n==\nManages candidate interview\nrequest lifecycle" as candidateService
  
  CONTAINER "slot-seeker\n==\nComputes matching slots\nfrom available data" as slotSeeker
  
  CONTAINER "interview-scheduler\n==\nFinalizes slot assignment and\ngenerates interviewer invites" as interviewScheduler
  
  CONTAINER "notifier-service\n==\nSends notifications to\ninterviewers/recruiters" as notifierService
  
  CONTAINER "chatbot\n==\nNLP-powered interface for recruiters" as chatbot
  
  CONTAINER "chatbot-interpreter\n==\nProcesses NLP queries" as chatbotInterpreter
  
  CONTAINER "dashboard-service\n==\nProvides UI-backed reports\nand insights" as dashboardService
  
  CONTAINER "harvest-sync\n==\nPeriodically fetches data\nfrom external systems" as harvestSync
  
  CONTAINER "config-service\n==\nStores tunable weights,\nround logic, rule configs" as configService
  
  ' Databases
  DATABASE "MongoDB\n==\nDurable sync cache + configs" as mongodb
  DATABASE "Interview Queue\n==\n(Kafka)" as interviewQueue
}

' External connections
recruiter -down-> chatbot : "Uses"
recruiter -down-> dashboardService : "Views reports"
candidate -down-> mindComputeScheduler : "Selects slots"
interviewLoggerWrapper -right-> interviewLogger : "Receives webhooks,\nupdates schedule"

' Connection to external systems
harvestSync -up-> myMindComputeProfile : "Fetches data"
harvestSync -up-> leavePlanner : "Fetches data"
harvestSync -up-> calendar : "Fetches data"
harvestSync -up-> mindComputeScheduler : "Fetches data"
notifierService -up-> Messenger : "Sends notifications"
notifierService -up-> calendar : "Schedules interviews"

' Internal connections
interviewLoggerWrapper -down-> candidateService : "Webhooks for candidate updates"
candidateService -right-> slotSeeker : "Queries for available slots"
candidateService -right-> mindComputeScheduler : "Forwards slot list"
mindComputeScheduler -left-> candidateService : "Selected slot webhook"
candidateService -down-> interviewScheduler : "Forwards selected slot"

slotSeeker -up-> harvestSync : "Gets availability data"
slotSeeker -down-> configService : "Gets configuration"
slotSeeker <-left- interviewScheduler : "Gets scheduled slots"

interviewScheduler -down-> interviewQueue : "Publishes scheduled interviews"
notifierService -up-> interviewQueue : "Consumes scheduled interviews"

chatbot -right-> chatbotInterpreter : "Processes NLP queries"
chatbotInterpreter -down-> slotSeeker : "Queries slots"
chatbotInterpreter -down-> interviewScheduler : "Triggers scheduling"

dashboardService -right-> interviewLoggerWrapper : "Gets candidate data"

harvestSync -down-> mongodb : "Writes sync data"
configService -left-> mongodb : "Stores/reads configuration"
@enduml