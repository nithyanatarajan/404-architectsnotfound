@startuml
!define PERSON actor
!define SYSTEM_BOUNDARY rectangle
!define CONTAINER rectangle
!define EXTERNAL_SYSTEM rectangle
!define DATABASE database

TITLE RecruitX Next â€“ C2 Container Diagram

' People
PERSON "Recruiter" as recruiter
PERSON "Candidate" as candidate
PERSON "Interviewer" as interviewer

' External Systems Group
package "External Systems" {
  EXTERNAL_SYSTEM "InterviewLogger\n(ATS)" as interviewLogger
  EXTERNAL_SYSTEM "MyMindComputeProfile\n(Skills)" as myMindComputeProfile
  EXTERNAL_SYSTEM "LeavePlanner" as leavePlanner
  EXTERNAL_SYSTEM "Calendar" as calendar
  EXTERNAL_SYSTEM "MindComputeScheduler\n(Candidate Slot UI)" as mindComputeScheduler
  EXTERNAL_SYSTEM "Messenger\n(Chatbot Platform)" as Messenger
}

' RecruitX System
SYSTEM_BOUNDARY "RecruitX Next System" as recruitX {

  package "Interface Layer" {
    CONTAINER "interviewLogger-wrapper\n==\nHandles InterviewLogger webhooks" as interviewLoggerWrapper
    CONTAINER "chatbot\n==\nChat interface for scheduling" as chatbot
    CONTAINER "dashboard-service\n==\nRead-only fallback & reporting UI" as dashboard
  }

  package "Core Services" {
    CONTAINER "candidate-service\n==\nOrchestrates scheduling lifecycle" as candidateService
    CONTAINER "slot-seeker\n==\nComputes valid interview slots" as slotSeeker
    CONTAINER "interview-scheduler\n==\nPicks interviewers, finalizes slot" as scheduler
    CONTAINER "notifier-service\n==\nSends Calendar invites, Messenger alerts" as notifier
    CONTAINER "chatbot-interpreter\n==\nNLP intent parser for chatbot" as interpreter
  }

  package "Config Layer" {
    CONTAINER "config-service\n==\nManages weights, thresholds, rules" as config
  }

  package "Data Layer" {
    CONTAINER "harvest-sync\n==\nPeriodic sync from external systems" as harvester
    DATABASE "MongoDB\n==\nCached interviewer data" as mongodb
    DATABASE "MongoDB\n==\nConfigurations" as configdb
    DATABASE "Kafka Topics\n==\nInterview events + DLQs" as kafka
  }
}

' === Recruiter & Candidate Flow ===
recruiter --> chatbot : Initiates scheduling (NLP)
chatbot --> interpreter : Sends recruiter query
interpreter --> slotSeeker : Fetches availability
interpreter --> scheduler : Triggers slot request

recruiter --> dashboard : Views reports, status
dashboard --> interviewLoggerWrapper : Pulls candidate data

candidate --> mindComputeScheduler : Selects slot via link

' === InterviewLogger Flow ===
interviewLogger -.-> interviewLoggerWrapper : Sends webhook
interviewLoggerWrapper --> candidateService : Forwards candidate info

' === Scheduling Workflow ===
candidateService --> slotSeeker : Gets slot options
candidateService --> mindComputeScheduler : Sends options to candidate
mindComputeScheduler -.-> candidateService : Selected slot webhook
candidateService --> scheduler : Sends final slot

scheduler --> slotSeeker : Validates slot
scheduler --> config : Applies scoring
scheduler -.-> kafka : Publishes scheduled interview

notifier -.-> kafka : Subscribes to event
notifier --> calendar : Sends invite
notifier --> Messenger : Sends alert

' === Data Layer ===
harvester -.-> myMindComputeProfile : Sync skills
harvester -.-> leavePlanner : Sync PTO
harvester -.-> mindComputeScheduler : Sync preferences
harvester -.-> calendar : Sync availability
harvester --> mongodb : [Cache] Write external systems data

interviewLoggerWrapper --> mongodb : [Cache] Write interview data

slotSeeker --> config : Get rules
slotSeeker --> mongodb : Read data
config --> configdb : Store rules

@enduml
